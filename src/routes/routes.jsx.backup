import { Route, createRoutesFromElements } from "react-router-dom";
import Boilerplate from "../layouts/Boilerplate";


import Home from "../pages/Home";
import About from "../components/home/About";
import Testimonials from "../components/home/Testimonials";
import Pricing from "../components/home/Pricing";
import Contact from "../components/home/ContactForm";

import NewsletterConfirmed from "../pages/User/NewsletterConfirmed";
import NewsletterInboxCheck from "../pages/User/NewsletterInboxCheck";
import PaymentSuccess from "../pages/Payment/PaymentSuccess";
import PaymentCancelled from "../pages/Payment/PaymentCancelled";
import Cart from "../pages/Payment/Cart";

import BlogPage from "../components/Blog/BlogPage";

import Login from "../pages/User/Login";
import Register from "../pages/User/Register";
import ForgotPassword from "../pages/User/ForgotPassword";
import ResetPassword from "../pages/User/ResetPassword";
import WorkoutAuthPage from "../pages/Workouts/WorkoutAuthPage";

import ProtectedRoute from "../components/Shared/ProtectedRoute";
import AdminRoute from "../components/Admin/AdminRoute";

import WorkoutPage from "../pages/Workouts/WorkoutPage";
import ProgramDayListPage from "../pages/Workouts/ProgramDayListPage";
import RoutinePage from "../pages/Workouts/Routine";
import ChangePasswordFirstLoginPage from "../pages/User/ChangePasswordFirstLogin";
import Profile from "../pages/User/Profile";

import CalorieCalculator from "../pages/calculator/CalorieCalculator";

import AdminDashboard from "../pages/Admin/AdminDashboard";
import ExerciseManagement from "../pages/Admin/ExerciseManagement";
import ProgramManagement from "../pages/Admin/ProgramManagement";
import WorkoutDayManagement from "../pages/Admin/WorkoutDayManagement";
import WorkoutDayList from "../pages/Admin/WorkoutDayList";

// BlogManagement component - should be moved to separate file later
const BlogManagement = () => {
  return <div className="p-8"><h1>Blog Management Coming Soon</h1></div>;
};

import NotFoundPage from "../pages/errors/NotFoundPage";

const routes = createRoutesFromElements(
  <Route path="/" element={<Boilerplate />}>
      const data = await response.json();
      setBlogs(data);
    } catch (error) {
      console.error("Error fetching blogs:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/blog`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) throw new Error("Failed to create blog");

      const newBlog = await response.json();
      setBlogs([...blogs, newBlog]);
      setShowCreateForm(false);
      resetForm();
      alert("Blog created successfully!");
    } catch (error) {
      console.error("Error creating blog:", error);
      alert("Failed to create blog");
    }
  };

  const handleUpdate = async (id) => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/blog/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) throw new Error("Failed to update blog");

      const updatedBlog = await response.json();
      setBlogs(blogs.map((blog) => (blog.ID === id ? updatedBlog : blog)));
      setEditingBlog(null);
      resetForm();
      alert("Blog updated successfully!");
    } catch (error) {
      console.error("Error updating blog:", error);
      alert("Failed to update blog");
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this blog post?"))
      return;

    try {
      const response = await fetch(`${BACKEND_URL}/api/blog/${id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
      });

      if (!response.ok) throw new Error("Failed to delete blog");

      setBlogs(blogs.filter((blog) => blog.ID !== id));
      alert("Blog deleted successfully!");
    } catch (error) {
      console.error("Error deleting blog:", error);
      alert("Failed to delete blog");
    }
  };

  const startEdit = (blog) => {
    setEditingBlog(blog.ID);
    setFormData({
      title: blog.title || "",
      image: blog.image || "",
      excerpt: blog.excerpt || "",
      fullContent: blog.fullContent || "",
      isFeatured: blog.isFeatured || false,
      category: blog.category || "",
    });
  };

  const resetForm = () => {
    setFormData({
      title: "",
      image: "",
      excerpt: "",
      fullContent: "",
      isFeatured: false,
      category: "",
    });
  };

  const cancelEdit = () => {
    setEditingBlog(null);
    setShowCreateForm(false);
    resetForm();
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-customGray">
        <p className="text-xl font-titillium text-customWhite">
          Loading blogs...
        </p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-customGray/30 to-white p-6 pt-24">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center gap-4 mb-8">
          <Link
            to="/admin"
            className="p-2 bg-customGray text-brightYellow rounded hover:bg-brightYellow hover:text-customGray transition-colors"
          >
            ‚Üê Back
          </Link>
          <div className="flex justify-between items-center w-full">
            <h1 className="font-higherJump text-3xl md:text-4xl font-bold text-customGray leading-loose tracking-widest">
              Blog Management
            </h1>
            <button
              onClick={() => setShowCreateForm(true)}
              className="btn-full-colour flex items-center gap-2"
            >
              + Add Blog Post
            </button>
          </div>
        </div>

        {showCreateForm && (
          <div className="bg-customGray p-6 rounded-lg border-2 border-brightYellow mb-8">
            <h3 className="text-xl font-bold text-customWhite mb-4 font-higherJump">
              Create New Blog Post
            </h3>
            <BlogForm
              formData={formData}
              setFormData={setFormData}
              categories={categories}
              onSave={handleCreate}
              onCancel={cancelEdit}
            />
          </div>
        )}

        <div className="grid gap-6">
          {blogs.map((blog) => (
            <div
              key={blog.ID}
              className="bg-customGray p-6 rounded-lg border-2 border-brightYellow"
            >
              {editingBlog === blog.ID ? (
                <BlogForm
                  formData={formData}
                  setFormData={setFormData}
                  categories={categories}
                  onSave={() => handleUpdate(blog.ID)}
                  onCancel={cancelEdit}
                />
              ) : (
                <div>
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-xl font-bold text-customWhite font-higherJump">
                        {blog.title}
                      </h3>
                      <p className="text-brightYellow font-titillium">
                        {blog.category}
                      </p>
                      {blog.isFeatured && (
                        <span className="inline-block bg-hotPink text-white px-2 py-1 rounded text-xs font-titillium mt-1">
                          Featured
                        </span>
                      )}
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => startEdit(blog)}
                        className="p-2 bg-brightYellow text-customGray rounded hover:bg-hotPink transition-colors"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDelete(blog.ID)}
                        className="p-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>

                  {blog.excerpt && (
                    <p className="text-logoGray mb-2 font-titillium">
                      {blog.excerpt.substring(0, 200)}...
                    </p>
                  )}

                  {blog.image && (
                    <div className="mt-4">
                      <img
                        src={blog.image}
                        alt={blog.title}
                        className="w-full h-48 object-cover rounded"
                      />
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const BlogForm = ({ formData, setFormData, categories, onSave, onCancel }) => {
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label className="block text-customWhite font-titillium mb-2">
          Title *
        </label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => handleInputChange("title", e.target.value)}
          className="w-full p-3 rounded bg-customWhite text-customGray font-titillium"
          required
        />
      </div>

      <div>
        <label className="block text-customWhite font-titillium mb-2">
          Category *
        </label>
        <select
          value={formData.category}
          onChange={(e) => handleInputChange("category", e.target.value)}
          className="w-full p-3 rounded bg-customWhite text-customGray font-titillium"
          required
        >
          <option value="">Select Category</option>
          {categories.map((cat) => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-customWhite font-titillium mb-2">
          Image URL
        </label>
        <input
          type="url"
          value={formData.image}
          onChange={(e) => handleInputChange("image", e.target.value)}
          className="w-full p-3 rounded bg-customWhite text-customGray font-titillium"
          placeholder="https://example.com/image.jpg"
        />
      </div>

      <div className="flex items-center">
        <label className="flex items-center text-customWhite font-titillium">
          <input
            type="checkbox"
            checked={formData.isFeatured}
            onChange={(e) => handleInputChange("isFeatured", e.target.checked)}
            className="mr-2"
          />
          Featured Post
        </label>
      </div>

      <div className="md:col-span-2">
        <label className="block text-customWhite font-titillium mb-2">
          Excerpt *
        </label>
        <textarea
          value={formData.excerpt}
          onChange={(e) => handleInputChange("excerpt", e.target.value)}
          className="w-full p-3 rounded bg-customWhite text-customGray font-titillium"
          rows="3"
          placeholder="Brief description of the blog post"
          required
        />
      </div>

      <div className="md:col-span-2">
        <label className="block text-customWhite font-titillium mb-2">
          Full Content * (HTML supported)
        </label>
        <textarea
          value={formData.fullContent}
          onChange={(e) => handleInputChange("fullContent", e.target.value)}
          className="w-full p-3 rounded bg-customWhite text-customGray font-titillium font-mono text-sm"
          rows="12"
          placeholder="<p>Your blog content here...</p>"
          required
        />
        <p className="text-logoGray text-xs mt-1">
          You can use HTML tags like &lt;p&gt;, &lt;h3&gt;, &lt;strong&gt;,
          &lt;section&gt;, etc.
        </p>
      </div>

      <div className="md:col-span-2 flex gap-4 mt-4">
        <button
          onClick={onSave}
          className="btn-full-colour flex items-center gap-2"
          disabled={
            !formData.title ||
            !formData.category ||
            !formData.excerpt ||
            !formData.fullContent
          }
        >
          üíæ Save
        </button>
        <button
          onClick={onCancel}
          className="btn-outline flex items-center gap-2"
        >
          ‚ùå Cancel
        </button>
      </div>
    </div>
  );
};

import NotFoundPage from "../pages/errors/NotFoundPage";

const routes = createRoutesFromElements(
  <Route path="/" element={<Boilerplate />}>
    {/* Home page */}
    <Route index element={<Home />} />
    <Route path="/about" element={<About />} />
    <Route path="/testimonials" element={<Testimonials />} />
    <Route path="/pricing" element={<Pricing />} />
    <Route path="/contact" element={<Contact />} />

    {/* Brevo */}
    {/* Newsletter */}
    <Route path="/newsletter/confirm" element={<NewsletterConfirmed />} />
    <Route path="/newsletter/check-inbox" element={<NewsletterInboxCheck />} />

    {/* Pricing and payments */}
    <Route path="/payment-success" element={<PaymentSuccess />} />
    <Route path="/payment-cancelled" element={<PaymentCancelled />} />
    <Route path="/cart" element={<Cart />} />

    {/* Blog */}
    <Route path="/blog" element={<BlogPage />} />
    <Route path="/blog/:postId" element={<BlogPage />} />

    {/* Authentication Routes (unprotected) */}
    <Route path="/login" element={<Login />} />
    <Route path="/register" element={<Register />} />
    <Route path="/forgot-password" element={<ForgotPassword />} />
    <Route path="/reset-password/:token" element={<ResetPassword />} />
    <Route path="/workout-auth" element={<WorkoutAuthPage />} />

    {/* Protected Routes */}
    <Route element={<ProtectedRoute />}>
      <Route
        path="/change-password-first-login"
        element={<ChangePasswordFirstLoginPage />}
      />
      <Route path="/profile" element={<Profile />} />
      <Route path="/calorie-calculator" element={<CalorieCalculator />} />
      <Route
        path="/workouts/:programName/list"
        element={<ProgramDayListPage />}
      />
      <Route
        path="/workouts/:programName/routines/:routineType"
        element={<RoutinePage />}
      />
      <Route
        path="/workouts/:programName/:dayNumber"
        element={<WorkoutPage />}
      />
      <Route path="/blog/create" element={<BlogPage />} />
      <Route path="/blog/edit" element={<BlogPage />} />
    </Route>

    {/* Admin Routes */}
    <Route element={<AdminRoute />}>
      <Route path="/admin" element={<AdminDashboard />} />
      <Route path="/admin/exercises" element={<ExerciseManagement />} />
      <Route path="/admin/programs" element={<ProgramManagement />} />
      <Route path="/admin/workout-days" element={<WorkoutDayList />} />
      <Route
        path="/admin/workout-days/:programId"
        element={<WorkoutDayManagement />}
      />
      <Route path="/admin/blogs" element={<BlogManagement />} />
    </Route>

    {/* Error */}
    <Route path="*" element={<NotFoundPage />} />
  </Route>
);

export default routes;
